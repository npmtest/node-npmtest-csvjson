{"/home/travis/build/npmtest/node-npmtest-csvjson/test.js":"/* istanbul instrument in package npmtest_csvjson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csvjson/lib.npmtest_csvjson.js":"/* istanbul instrument in package npmtest_csvjson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_csvjson = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_csvjson = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-csvjson/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-csvjson && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_csvjson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_csvjson\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_csvjson.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_csvjson.rollup.js'] =\n            local.assetsDict['/assets.npmtest_csvjson.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_csvjson.__dirname + '/lib.npmtest_csvjson.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csvjson/node_modules/csvjson/index.js":"\nmodule.exports = {\n    toObject        : toObject,\n    toArray         : toArray,\n    toColumnArray   : toColumnArray,\n    toSchemaObject  : toSchemaObject,\n    toCSV           : toCSV\n}\n\n\nfunction toColumnArray(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = _getQuote(opts.quote);\n    var content     = data;\n    var headers     = null;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content         = content.split(/[\\n\\r]+/ig);\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                _convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);    \n    }else{\n        headers = quote ?\n                _convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);    \n    }\n    \n\n    var hashData    = { };\n\n    headers.forEach(function(item){\n        hashData[item] = [];\n    });\n\n    content.forEach(function(item){\n        if(item){\n            item = quote ?\n                  _convertArray(item, delimiter, quote) :\n                  item.split(delimiter);\n            item.forEach(function(val, index){\n                hashData[headers[index]].push(_trimQuote(val));\n            });\n        }\n    });\n\n    return hashData;\n}\n\nfunction toObject(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = _getQuote(opts.quote);\n    var content     = data;\n    var headers     = null;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content = content.split(/[\\n\\r]+/ig);\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                _convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);    \n    }else{\n        headers = quote ?\n                _convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);    \n    }\n\n    var hashData = [ ];\n\n    content.forEach(function(item){\n        if(item){\n          item = quote ?\n                _convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n            var hashItem = { };\n            headers.forEach(function(headerItem, index){\n                hashItem[headerItem] = _trimQuote(item[index]);\n            });\n            hashData.push(hashItem);\n        }\n    });\n    return hashData;\n}\n\nfunction toSchemaObject(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = _getQuote(opts.quote);\n    var content     = data;\n    var headers     = null;\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input should be a string\");\n    }\n\n    content         = content.split(/[\\n\\r]+/ig);\n\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                _convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);    \n    }else{\n        headers = quote ?\n                _convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);    \n    }\n    \n\n    var hashData    = [ ];\n\n    content.forEach(function(item){\n        if(item){\n          item = quote ?\n                _convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n            var schemaObject = {};\n            item.forEach(function(val, index){\n                _putDataInSchema(headers[index], val, schemaObject , delimiter, quote);\n            });\n            hashData.push(schemaObject);\n        }\n    });\n\n    return hashData;\n}\n\nfunction toArray(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = _getQuote(opts.quote);\n    var content     = data;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content = content.split(/[\\n\\r]+/ig);\n    var arrayData = [ ];\n    content.forEach(function(item){\n        if(item){\n            item = quote ?\n                _convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n\n            item = item.map(function(cItem){\n                return _trimQuote(cItem);\n            });\n            arrayData.push(item);\n        }\n    });\n    return arrayData;\n}\n\nfunction _getQuote(q){\n  if(typeof(q) === \"string\"){\n    return q;\n  }else if(q === true){\n    return '\"';\n  }\n  return null;\n}\n\nfunction _dataType(arg) {\n    if (arg === null) {\n        return 'null';\n    }\n    else if (arg && (arg.nodeType === 1 || arg.nodeType === 9)) {\n        return 'element';\n    }\n    var type = (Object.prototype.toString.call(arg)).match(/\\[object (.*?)\\]/)[1].toLowerCase();\n    if (type === 'number') {\n        if (isNaN(arg)) {\n            return 'nan';\n        }\n        if (!isFinite(arg)) {\n            return 'infinity';\n        }\n    }\n    return type;\n}\n\nfunction toCSV(data, opts){\n\n    opts                = (opts || { });\n    opts.delimiter      = (opts.delimiter || ',');\n    opts.wrap           = (opts.wrap || '');\n    opts.arrayDenote    = (opts.arrayDenote && String(opts.arrayDenote).trim() ? opts.arrayDenote : '[]');\n    opts.objectDenote   = (opts.objectDenote && String(opts.objectDenote).trim() ? opts.objectDenote : '.');\n    opts.detailedOutput = (typeof(opts.detailedOutput) !== \"boolean\" ? true : opts.detailedOutput);\n    opts.headers        = String(opts.headers).toLowerCase();\n    var csvJSON         = { };\n    var csvData         = \"\";\n\n    if(!opts.headers.match(/none|full|relative|key/)){\n      opts.headers = 'full';\n    }else{\n      opts.headers = opts.headers.match(/none|full|relative|key/)[0];\n    }\n\n    if(opts.wrap === true){\n        opts.wrap = '\"';\n    }\n\n    if(typeof(data) === \"string\"){\n        data = JSON.parse(data);\n    }\n\n    _toCsv(data, csvJSON, \"\", 0, opts);\n\n    var headers = _getHeaders(opts.headers, csvJSON, opts);\n\n    if(headers){\n      if(opts.wrap){\n        headers = headers.map(function(item){\n          return opts.wrap + item + opts.wrap;\n        });\n      }\n      csvData = headers.join(opts.delimiter);\n    }\n\n    var bigArrayLen = _getBigArrayLength(csvJSON);\n    var keys        = Object.keys(csvJSON);\n    var row         = [ ];\n\n    var replaceNewLinePattern = /\\n|\\r/g;\n    if(!opts.wrap){\n        replaceNewLinePattern = new RegExp('\\n|\\r|' + opts.delimiter, 'g');\n    }\n\n\n    for(var i = 0; i < bigArrayLen; i++){\n        row = [ ];\n        for(var j = 0; j < keys.length; j++){\n            if(csvJSON[keys[j]][i]){\n                csvJSON[keys[j]][i] = csvJSON[keys[j]][i].replace(replaceNewLinePattern, '\\t');\n                if(opts.wrap){\n                    csvJSON[keys[j]][i] = opts.wrap + csvJSON[keys[j]][i] + opts.wrap;\n                }\n                row[row.length] = csvJSON[keys[j]][i];\n            }else{\n                row[row.length] = \"\";\n            }\n        }\n      csvData += '\\n' + row.join(opts.delimiter);\n    }\n    return csvData;\n}\n\nfunction _toCsv(data, table, parent, row, opt){\n    if(_dataType(data) === 'undefined'){\n        return _putData('', table, parent, row, opt);\n    }else if(_dataType(data) === 'null'){\n        return _putData('null', table, parent, row, opt);\n    }else if(Array.isArray(data)){\n        return _arrayToCsv(data, table, parent, row, opt);\n    }else if(typeof(data) === \"object\"){\n        return _objectToCsv(data, table, parent, row, opt);\n    }else{\n        return _putData(String(data), table, parent, row, opt);\n    }\n}\n\nfunction _putData(data, table, parent, row, opt){\n  if(!table || !table[parent]){\n      table[parent] = [ ];\n  }\n  if(row < table[parent].length){\n    row = table[parent].length;\n  }\n  table[parent][row] = data;\n  return table;\n}\n\nfunction _arrayToCsv(data, table, parent, row, opt){\n    if(_doesNotContainsObjectAndArray(data)){\n      return _putData(data.join(';'), table, parent + opt.arrayDenote, row, opt);\n    }\n    data.forEach(function(item, index){\n        return _toCsv(item, table, parent + opt.arrayDenote, index, opt);\n    });\n}\n\nfunction _doesNotContainsObjectAndArray(array){\n  return array.every(function(item){\n        var datatype = _dataType(item);\n        if(!datatype.match(/array|object/)){\n          return true;\n        }\n        return false;\n  });\n}\n\nfunction _objectToCsv(data, table, parent, row, opt){\n  Object.keys(data).forEach(function(item){\n      return _toCsv(data[item], table, parent + opt.objectDenote + item, row, opt);\n  });\n}\n\nfunction _getHeaders(headerType, table, opt){\n  var keyMatchPattern       = /([\\w\\s_\\[\\]]+)$/;\n  var relativeMatchPattern  = /\\[\\]\\.?([^\\[\\]]+)$/;\n  switch(headerType){\n    case \"none\":\n      return null;\n    case \"full\":\n      return Object.keys(table);\n    case \"key\":\n      return Object.keys(table).map(function(header){\n        var head = header.match(keyMatchPattern);\n        if(head && head.length === 2){\n          return head[1];\n        }\n        return header;\n      });\n    case \"relative\":\n      return Object.keys(table).map(function(header){\n        var head = header.match(relativeMatchPattern);\n        if(head && head.length === 2){\n          return head[1];\n        }\n        return header;\n      });\n  }\n}\n\nfunction _getBigArrayLength(table){\n  var len = 0;\n  Object.keys(table).forEach(function(item){\n      if(Array.isArray(table[item]) && table[item].length > len){\n        len = table[item].length;\n      }\n  });\n  return len;\n}\n\nfunction _putDataInSchema(header, item, schema, delimiter, quote){\n    var match = header.match(/\\[*[\\d]\\]\\.(\\w+)|\\.|\\[\\]|\\[(.)\\]|-|\\+/ig);\n    var headerName, currentPoint;\n    if(match){\n        var testMatch = match[0];\n        if(match.indexOf('-') !== -1){\n            return true;\n        }else if(match.indexOf('.') !== -1){\n            var headParts = header.split('.');\n            currentPoint = headParts.shift();\n            schema[currentPoint] = schema[currentPoint] || {};\n            _putDataInSchema(headParts.join('.'), item, schema[currentPoint], delimiter, quote);\n        }else if(match.indexOf('[]') !== -1){\n            headerName = header.replace(/\\[\\]/ig,'');\n            if(!schema[headerName]){\n            schema[headerName] = [];\n            }\n            schema[headerName].push(item);\n        }else if(/\\[*[\\d]\\]\\.(\\w+)/.test(testMatch)){\n            headerName = header.split('[').shift();\n            var index = parseInt(testMatch.match(/\\[(.)\\]/).pop(),10);\n            currentPoint = header.split('.').pop();\n            schema[headerName] = schema[headerName] || [];\n            schema[headerName][index] = schema[headerName][index] || {};\n            schema[headerName][index][currentPoint] = item;\n        }else if(/\\[(.)\\]/.test(testMatch)){\n            var delimiter = testMatch.match(/\\[(.)\\]/).pop();\n            headerName = header.replace(/\\[(.)\\]/ig,'');\n            schema[headerName] = _convertArray(item, delimiter, quote);\n        }else if(match.indexOf('+') !== -1){\n            headerName = header.replace(/\\+/ig,\"\");\n            schema[headerName] = Number(item);\n        }\n    }else{\n        schema[header] = _trimQuote(item);\n    }\n    return schema ;\n}\n\nfunction _trimQuote(str){\n    if(str){\n        return String(str).trim().replace(/^[\"|'](.*)[\"|']$/, '$1');   \n    }\n    return \"\";\n}\n\nfunction _convertArray(str, delimiter, quote) {\n    if(quote && str.indexOf(quote) !== -1){\n      return _csvToArray(str, delimiter, quote);\n    }\n    var output = [];\n    var arr = str.split(delimiter);\n    arr.forEach(function(val) {\n        var trimmed = val.trim();\n        output.push(trimmed);\n    });\n    return output;\n}\n\nfunction _csvToArray(text, delimit, quote) {\n\n    delimit = delimit || \",\";\n    quote   = quote || '\"';\n\n    var validate = new RegExp(\"^\\\\s*(?:\" +  quote + \"[^\" +  quote + \"\\\\\\\\]*(?:\\\\\\\\[\\\\S\\\\s][^\" +  quote + \"\\\\\\\\]*)*\" +  quote + \"|[^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]*(?:\\\\s+[^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]+)*)\\\\s*(?:\" +  delimit + \"\\\\s*(?:\" +  quote + \"[^\" +  quote + \"\\\\\\\\]*(?:\\\\\\\\[\\\\S\\\\s][^\" +  quote + \"\\\\\\\\]*)*\" +  quote + \"|[^,\" +  quote + \"\\\\s\\\\\\\\]*(?:\\\\s+[^\" +  delimit +  quote + \"\\\\s\\\\\\\\]+)*)\\\\s*)*$\");\n\n    var value = new RegExp(\"(?!\\\\s*$)\\\\s*(?:\" +  quote + \"([^\" +  quote + \"\\\\\\\\]*(?:\\\\\\\\[\\\\S\\\\s][^\" +  quote + \"\\\\\\\\]*)*)\" +  quote + \"|([^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]*(?:\\\\s+[^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]+)*))\\\\s*(?:\" +  delimit + \"|$)\", \"g\");\n\n     if (!validate.test(text)){\n        return null;\n    }\n    var a = [ ];\n\n    text.replace(value,\n        function(m0, m1, m2) {\n            if(m1 !== undefined){\n                a.push(m1.replace(/\\\\'/g, \"'\"));\n            }else if(m2 !== undefined){\n                a.push(m2);\n            }\n            return '';\n        }\n    );\n\n    if (/,\\s*$/.test(text)){\n        a.push('');\n    }\n    return a;\n}\n"}